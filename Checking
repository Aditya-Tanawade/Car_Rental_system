/* Header Styles */
.applications-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.header-content {
    color: white;
}

.page-title {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
}

.page-subtitle {
    font-size: 1rem;
    opacity: 0.9;
    margin: 0;
}

/* Success Box */
.success-box {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    box-shadow: 0 4px 6px rgba(102, 126, 234, 0.3);
    animation: slideDown 0.3s ease-out;
}

.success-box i {
    font-size: 1.25rem;
}

@keyframes slideDown {
    from {
        transform: translateY(-20px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* Interviews Container */
.interviews-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

/* Card Styles */
.card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    overflow: hidden;
}

.card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
    transform: translateY(-4px);
}

.card-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 1.25rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
}

.card-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.card-subtitle {
    font-size: 0.875rem;
    opacity: 0.9;
}

.status-badge {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.375rem 0.75rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
    backdrop-filter: blur(10px);
}

.card-content {
    padding: 1.25rem;
}

.candidate-profile {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e5e7eb;
}

.candidate-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 1.125rem;
}

.candidate-info h4 {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
    font-weight: 600;
    color: #1f2937;
}

.candidate-info p {
    margin: 0;
    font-size: 0.875rem;
    color: #6b7280;
}

.info-row {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
    font-size: 0.875rem;
}

.info-label {
    color: #6b7280;
    font-weight: 500;
}

.info-value {
    color: #1f2937;
    font-weight: 600;
}

.status-pending {
    color: #f59e0b;
}

.card-actions {
    padding: 1rem 1.25rem;
    background: #f9fafb;
    display: flex;
    gap: 0.75rem;
    border-top: 1px solid #e5e7eb;
}

/* Button Styles */
.btn {
    padding: 0.625rem 1.25rem;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    flex: 1;
    justify-content: center;
}

.btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(102, 126, 234, 0.4);
}

.btn-outline {
    background: white;
    color: #667eea;
    border: 2px solid #667eea;
}

.btn-outline:hover {
    background: #667eea;
    color: white;
    transform: translateY(-2px);
}

.btn-secondary {
    background: #6b7280;
    color: white;
}

.btn-secondary:hover {
    background: #4b5563;
}

.btn-sm {
    padding: 0.5rem 1rem;
    font-size: 0.8125rem;
}

/* Modal Styles */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    animation: fadeIn 0.3s ease-out;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.modal-content {
    background: white;
    border-radius: 16px;
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    animation: slideUp 0.3s ease-out;
}

@keyframes slideUp {
    from {
        transform: translateY(50px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 16px 16px 0 0;
}

.modal-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: 600;
}

.close-btn {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.close-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: rotate(90deg);
}

.modal-body {
    padding: 1.5rem;
}

.candidate-details {
    background: #f9fafb;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    border-left: 4px solid #667eea;
}

.candidate-details h3 {
    margin: 0 0 0.25rem 0;
    font-size: 1.125rem;
    color: #1f2937;
}

.candidate-details p {
    margin: 0;
    color: #6b7280;
    font-size: 0.875rem;
}

/* Form Styles */
.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #374151;
    font-size: 0.875rem;
}

.required {
    color: #ef4444;
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 0.875rem;
    transition: all 0.3s ease;
    font-family: inherit;
}

.form-control:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-control.error {
    border-color: #ef4444;
}

.form-control.error:focus {
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

.error-message {
    display: block;
    color: #ef4444;
    font-size: 0.75rem;
    margin-top: 0.25rem;
}

select.form-control {
    cursor: pointer;
    background: white;
}

textarea.form-control {
    resize: vertical;
    min-height: 100px;
}

.modal-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid #e5e7eb;
}

.modal-actions .btn {
    flex: 1;
}

/* Responsive Design */
@media (max-width: 768px) {
    .interviews-container {
        grid-template-columns: 1fr;
    }
    
    .modal-content {
        width: 95%;
        max-height: 95vh;
    }
    
    .card-actions {
        flex-direction: column;
    }
    
    .btn {
        width: 100%;
    }
}

/* Scrollbar Styles */
.modal-content::-webkit-scrollbar {
    width: 8px;
}

.modal-content::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.modal-content::-webkit-scrollbar-thumb {
    background: #667eea;
    border-radius: 10px;
}

.modal-content::-webkit-scrollbar-thumb:hover {
    background: #764ba2;
}







import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { ProjectManagerInterviewDTO } from '../../dto/ProjectManagerInterviewDTO';
import { PmService } from '../../service/pm-service';
import { FillAssesmentFromDTO } from '../../dto/FillAssesmentFromDTO';

@Component({
  selector: 'app-pm-pending-interviews',
  imports: [FormsModule, CommonModule],
  templateUrl: './pm-pending-interviews.html',
  styleUrl: './pm-pending-interviews.css'
})
export class PmPendingInterviews implements OnInit {
  
  pmInterviewDto: ProjectManagerInterviewDTO[] = [];
  fillAssesmentFormDto: FillAssesmentFromDTO = new FillAssesmentFromDTO();
  loginPmId: string = "";
  showAssessmentModal: boolean = false;
  selectedInterview: ProjectManagerInterviewDTO | null = null;
  showSuccessMessage: boolean = false;
  successMessage: string = "";

  constructor(private pmService: PmService) {}

  ngOnInit(): void {
    const pmIdSession = sessionStorage.getItem('loginId');
    if (pmIdSession) {
      this.loginPmId = pmIdSession;
      console.log('Login Pm Id retrieved from session storage:', this.loginPmId);
    } else {
      console.log('No Pm Id found in session storage.');
    }
    this.getAllPendingInterviewsByPmId(this.loginPmId);
  }

  getAllPendingInterviewsByPmId(loginPmId: string) {
    this.pmService.getAllPendingInterviewsByPmId(loginPmId).subscribe({
      next: (data) => {
        console.log('All Interviews From API ', data);
        this.pmInterviewDto = data;
      },
      error: (err) => {
        console.error("Exception occurred while calling API", err);
      },
      complete: () => {
        console.log("Data retrieval completed successfully");
      }
    });
  }

  openAssessmentForm(interview: ProjectManagerInterviewDTO) {
    this.selectedInterview = interview;
    this.showAssessmentModal = true;
    // Reset form
    this.fillAssesmentFormDto = new FillAssesmentFromDTO();
  }

  closeAssessmentForm() {
    this.showAssessmentModal = false;
    this.selectedInterview = null;
    this.fillAssesmentFormDto = new FillAssesmentFromDTO();
  }

  submitAssessment() {
    if (this.selectedInterview) {
      this.fillAssesmentForm(this.selectedInterview.interviewId);
    }
  }

  fillAssesmentForm(interviewId: number) {
    this.pmService.fillAssesmentForm(interviewId, this.fillAssesmentFormDto).subscribe({
      next: (data) => {
        console.log('Fill Assessment Form Response', data);
        this.showSuccessMessage = true;
        this.successMessage = "Assessment submitted successfully!";
        this.closeAssessmentForm();
        
        // Refresh the list
        this.getAllPendingInterviewsByPmId(this.loginPmId);
        
        // Hide success message after 3 seconds
        setTimeout(() => {
          this.showSuccessMessage = false;
        }, 3000);
      },
      error: (err) => {
        console.error("Exception occurred while calling API", err);
        this.showSuccessMessage = true;
        this.successMessage = "Error submitting assessment. Please try again.";
        setTimeout(() => {
          this.showSuccessMessage = false;
        }, 3000);
      },
      complete: () => {
        console.log("Assessment submission completed");
      }
    });
  }

  openGoogleMeet(meetLink: string) {
    if (meetLink) {
      window.open(meetLink, '_blank');
    } else {
      alert('Google Meet link not available');
    }
  }

  getInitials(name: string): string {
    if (!name) return '';
    const names = name.split(' ');
    if (names.length >= 2) {
      return (names[0][0] + names[1][0]).toUpperCase();
    }
    return name.substring(0, 2).toUpperCase();
  }
}



















<section class="applications-header">
    <div class="header-content">
        <h1 class="page-title">Pending Interviews</h1>
        <p class="page-subtitle">Pending Interviews Of Selected Candidates</p>
    </div>
</section>

<!-- Success Message -->
<div class="success-box" *ngIf="showSuccessMessage">
    <i class="fas fa-check-circle"></i>
    <span>{{ successMessage }}</span>
</div>

<!-- Interview Cards -->
<div class="interviews-container">
    <div class="card" *ngFor="let interview of pmInterviewDto">
        <div class="card-header">
            <div>
                <div class="card-title">{{ interview.jobRequestTitle }}</div>
                <div class="card-subtitle">Round {{ interview.roundNumber }} - {{ interview.role }}</div>
            </div>
            <span class="status-badge status-interview">{{ interview.startTime }} - {{ interview.endTime }}</span>
        </div>
        <div class="card-content">
            <div class="candidate-profile">
                <div class="candidate-avatar">{{ getInitials(interview.candidateName) }}</div>
                <div class="candidate-info">
                    <h4>{{ interview.candidateName }}</h4>
                    <p>Skills: {{ interview.skills }}</p>
                </div>
            </div>
            <div class="info-row">
                <span class="info-label">Interview Date:</span>
                <span class="info-value">{{ interview.interviewDate }}</span>
            </div>
            <div class="info-row">
                <span class="info-label">Status:</span>
                <span class="info-value status-pending">{{ interview.status }}</span>
            </div>
        </div>
        <div class="card-actions">
            <button class="btn btn-primary btn-sm" (click)="openGoogleMeet(interview.googleMeetLink)">
                <i class="fas fa-video"></i> Take Interview
            </button>
            <button class="btn btn-outline btn-sm" (click)="openAssessmentForm(interview)">
                <i class="fas fa-clipboard-check"></i> Fill Assessment
            </button>
        </div>
    </div>
</div>

<!-- Assessment Form Modal -->
<div class="modal-overlay" *ngIf="showAssessmentModal" (click)="closeAssessmentForm()">
    <div class="modal-content" (click)="$event.stopPropagation()">
        <div class="modal-header">
            <h2>Fill Assessment Form</h2>
            <button class="close-btn" (click)="closeAssessmentForm()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="candidate-details">
                <h3>{{ selectedInterview?.candidateName }}</h3>
                <p>{{ selectedInterview?.role }} - Round {{ selectedInterview?.roundNumber }}</p>
            </div>

            <form #assessmentForm="ngForm" (ngSubmit)="submitAssessment()">
                <div class="form-group">
                    <label for="status">Status <span class="required">*</span></label>
                    <select 
                        id="status" 
                        name="status" 
                        [(ngModel)]="fillAssesmentFormDto.status" 
                        #status="ngModel"
                        required
                        class="form-control"
                        [class.error]="status.invalid && status.touched">
                        <option value="">Select Status</option>
                        <option value="Selected">Selected</option>
                        <option value="Rejected">Rejected</option>
                    </select>
                    <span class="error-message" *ngIf="status.invalid && status.touched">
                        Status is required
                    </span>
                </div>

                <div class="form-group">
                    <label for="score">Score (0-10) <span class="required">*</span></label>
                    <input 
                        type="number" 
                        id="score" 
                        name="score" 
                        [(ngModel)]="fillAssesmentFormDto.score" 
                        #score="ngModel"
                        required
                        min="0"
                        max="10"
                        step="0.5"
                        class="form-control"
                        [class.error]="score.invalid && score.touched"
                        placeholder="Enter score between 0 and 10">
                    <span class="error-message" *ngIf="score.invalid && score.touched">
                        <span *ngIf="score.errors?.['required']">Score is required</span>
                        <span *ngIf="score.errors?.['min']">Score must be at least 0</span>
                        <span *ngIf="score.errors?.['max']">Score cannot exceed 10</span>
                    </span>
                </div>

                <div class="form-group">
                    <label for="remarks">Remarks <span class="required">*</span></label>
                    <textarea 
                        id="remarks" 
                        name="remarks" 
                        [(ngModel)]="fillAssesmentFormDto.remarks" 
                        #remarks="ngModel"
                        required
                        minlength="10"
                        rows="4"
                        class="form-control"
                        [class.error]="remarks.invalid && remarks.touched"
                        placeholder="Enter your remarks (minimum 10 characters)"></textarea>
                    <span class="error-message" *ngIf="remarks.invalid && remarks.touched">
                        <span *ngIf="remarks.errors?.['required']">Remarks are required</span>
                        <span *ngIf="remarks.errors?.['minlength']">Remarks must be at least 10 characters</span>
                    </span>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" (click)="closeAssessmentForm()">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" [disabled]="!assessmentForm.valid">
                        <i class="fas fa-save"></i> Submit Assessment
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
